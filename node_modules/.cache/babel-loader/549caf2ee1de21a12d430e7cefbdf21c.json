{"ast":null,"code":"import firebase from 'firebase';\nimport 'firebase/messaging';\nconst config = {\n  apiKey: \"AIzaSyDHOU1x37Ooaa1-V4UybYoSgSVN84m-uIE\",\n  authDomain: \"fir-cloud-message-6a1c9.firebaseapp.com\",\n  projectId: \"fir-cloud-message-6a1c9\",\n  storageBucket: \"fir-cloud-message-6a1c9.appspot.com\",\n  messagingSenderId: \"526123248650\",\n  appId: \"1:526123248650:web:7510ca5f70ce7cb4f903f3\"\n};\nfirebase.initializeApp(config);\nconst messaging = firebase.messaging();\nexport const getToken = setTokenFound => {\n  return messaging.getToken({\n    vapidKey: 'BIMXv9jcxjogZzN-3M2BIc124o8cy-INhbaaAZVU8FWIcMU2IAXoLL-3ypaoruExFbH0cJE5WG2NcgQt7htGuq4'\n  }).then(currentToken => {\n    if (currentToken) {\n      console.log('current token for client: ', currentToken);\n      setTokenFound(true); // Track the token -> client mapping, by sending to backend server\n      // show on the UI that permission is secured\n    } else {\n      console.log('No registration token available. Request permission to generate one.');\n      setTokenFound(false); // shows on the UI that permission is required \n    }\n  }).catch(err => {\n    console.log('An error occurred while retrieving token. ', err); // catch error while creating client token\n  });\n};\nexport const onMessageListener = () => new Promise(resolve => {\n  messaging.onMessage(payload => {\n    resolve(payload);\n  });\n});\nexport default firebase;","map":{"version":3,"sources":["D:/Personel/firebase-push-notification/src/firebase.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","messaging","getToken","setTokenFound","vapidKey","then","currentToken","console","log","catch","err","onMessageListener","Promise","resolve","onMessage","payload"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AACA,MAAMC,MAAM,GAAC;AACTC,EAAAA,MAAM,EAAE,yCADC;AAETC,EAAAA,UAAU,EAAE,yCAFH;AAGTC,EAAAA,SAAS,EAAE,yBAHF;AAITC,EAAAA,aAAa,EAAE,qCAJN;AAKTC,EAAAA,iBAAiB,EAAE,cALV;AAMTC,EAAAA,KAAK,EAAE;AANE,CAAb;AASAP,QAAQ,CAACQ,aAAT,CAAuBP,MAAvB;AACA,MAAMQ,SAAS,GAAGT,QAAQ,CAACS,SAAT,EAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AACzC,SAAOF,SAAS,CAACC,QAAV,CAAmB;AAACE,IAAAA,QAAQ,EAAE;AAAX,GAAnB,EAA0HC,IAA1H,CAAgIC,YAAD,IAAkB;AACtJ,QAAIA,YAAJ,EAAkB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,YAA1C;AACAH,MAAAA,aAAa,CAAC,IAAD,CAAb,CAFgB,CAGhB;AACA;AACD,KALD,MAKO;AACLI,MAAAA,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACAL,MAAAA,aAAa,CAAC,KAAD,CAAb,CAFK,CAGL;AACD;AACF,GAXM,EAWJM,KAXI,CAWGC,GAAD,IAAS;AAChBH,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DE,GAA1D,EADgB,CAEhB;AACD,GAdM,CAAP;AAeD,CAhBM;AAkBP,OAAO,MAAMC,iBAAiB,GAAG,MAC/B,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBZ,EAAAA,SAAS,CAACa,SAAV,CAAqBC,OAAD,IAAa;AAC/BF,IAAAA,OAAO,CAACE,OAAD,CAAP;AACD,GAFD;AAGH,CAJC,CADK;AAOP,eAAevB,QAAf","sourcesContent":["import firebase from 'firebase'\r\nimport 'firebase/messaging';\r\nconst config={\r\n    apiKey: \"AIzaSyDHOU1x37Ooaa1-V4UybYoSgSVN84m-uIE\",\r\n    authDomain: \"fir-cloud-message-6a1c9.firebaseapp.com\",\r\n    projectId: \"fir-cloud-message-6a1c9\",\r\n    storageBucket: \"fir-cloud-message-6a1c9.appspot.com\",\r\n    messagingSenderId: \"526123248650\",\r\n    appId: \"1:526123248650:web:7510ca5f70ce7cb4f903f3\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\nconst messaging = firebase.messaging();\r\n\r\nexport const getToken = (setTokenFound) => {\r\n  return messaging.getToken({vapidKey: 'BIMXv9jcxjogZzN-3M2BIc124o8cy-INhbaaAZVU8FWIcMU2IAXoLL-3ypaoruExFbH0cJE5WG2NcgQt7htGuq4'}).then((currentToken) => {\r\n    if (currentToken) {\r\n      console.log('current token for client: ', currentToken);\r\n      setTokenFound(true);\r\n      // Track the token -> client mapping, by sending to backend server\r\n      // show on the UI that permission is secured\r\n    } else {\r\n      console.log('No registration token available. Request permission to generate one.');\r\n      setTokenFound(false);\r\n      // shows on the UI that permission is required \r\n    }\r\n  }).catch((err) => {\r\n    console.log('An error occurred while retrieving token. ', err);\r\n    // catch error while creating client token\r\n  });\r\n}\r\n\r\nexport const onMessageListener = () =>\r\n  new Promise((resolve) => {\r\n    messaging.onMessage((payload) => {\r\n      resolve(payload);\r\n    });\r\n});\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}